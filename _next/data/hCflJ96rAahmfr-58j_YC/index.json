{"pageProps":{"examples":{"user":"def main(private field a, field b) {\n    assert(a * a == b);\n    return;\n}","conditionals":"def main(field x) -> field {\n    field y = if x + 2 == 3 { 1 } else { 5 };\n    return y;\n}","for-loops":"def main() -> u32 {\n    u32 mut res = 0;\n    for u32 i in 0..4 {\n        for u32 j in i..5 {\n            res = res + i;\n        }\n    }\n    return res;\n}","functions":"def foo(field a, field b) -> field {\n    return a + b;\n}\n\ndef main() -> field {\n    return foo(1, 2);\n}","generics":"def sum<N>(field[N] a) -> field {\n    field mut res = 0;\n    for u32 i in 0..N {\n        res = res + a[i];\n    }\n    return res;\n}\n\ndef main(field[3] a) -> field {\n    return sum(a);\n}","merkleTree":"import \"hashes/sha256/512bit\" as hash;\nimport \"hashes/utils/256bitsDirectionHelper\" as multiplex;\n\nconst u32 DEPTH = 3;\n\ndef select(bool condition, u32[8] left, u32[8] right) -> (u32[8], u32[8]) {\n    return (condition ? right : left, condition ? left : right);\n}\n\n// Merke-Tree inclusion proof for tree depth 3 using sha256\n// directionSelector => true if current digest is on the rhs of the hash\ndef main(u32[8] root, private u32[8] leaf, private bool[DEPTH] directionSelector, private u32[DEPTH][8] path) -> bool {\n    // Start from the leaf\n    u32[8] mut digest = leaf;\n\n\t// Loop up the tree\n    for u32 i in 0..DEPTH {\n\t    (u32[8], u32[8]) s = select(directionSelector[i], digest, path[i]);\n\t    digest = hash(s.0, s.1);\n    }\n\n    return digest == root;\n}","sha256":"import \"hashes/sha256/sha256Padded\";\n\ndef main(u8[4] input, u32[8] expected_hash) {\n    u32[8] hash = sha256Padded(input);\n    assert(hash == expected_hash);\n    return;\n}"}},"__N_SSG":true}